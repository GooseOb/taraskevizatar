const cacheConfig={names:["html","css","js","static"],html:{v:"2",files:["index.html"]},js:{v:"8",files:["script.js"]},css:{v:"1",files:["styles/style.css","styles/dark.css"]},static:{v:"1",files:["fonts/NotoSansArabic-SemiBold.ttf","icons/close.svg","icons/copy.svg","icons/edit.svg","icons/info.svg","icons/settings.svg","icons/theme/light.svg","icons/theme/dark.svg"]},isActual(s){var[s,e=null]=s.split("-v");return e===this[s]?.v}},log=(cacheConfig.names.forEach(s=>{cacheConfig[s].cacheName=s+"-v"+cacheConfig[s].v}),(...s)=>console.log("[SW]",...s)),cacheFirst=async s=>await caches.match(s)||await fetch(s);self.addEventListener("install",()=>{log("install"),cacheConfig.names.forEach(s=>{const{cacheName:e,files:c}=cacheConfig[s];caches.open(e).then(s=>s.addAll(c))})}),self.addEventListener("activate",async()=>{log("activate");const s=await caches.keys();await Promise.all(s.filter(s=>!cacheConfig.isActual(s)).map(s=>caches.delete(s)))}),self.addEventListener("fetch",s=>{s.respondWith(cacheFirst(s.request))});